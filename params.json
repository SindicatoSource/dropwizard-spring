{"name":"Dropwizard-spring","tagline":"Dropwizard with Spring Framework support for DI","body":"# Spring Framework support for Dropwizard\r\n\r\nDropwizard with Spring Framework support for DI\r\n\r\n## Motivation\r\nWe love Dropwizard and Spring framework. Unfortunately the existing solutions to bring together both technologies are outdated. We like Dropwizard latest version (yeah, the 0.7.0-SNAPSHOT).\r\n\r\nAnd we love pragmatic programming models. The less we write, the more happiness we have.\r\nThat's the reason this project was born.\r\n\r\n## Build Status\r\n[![Build Status](http://jenkins.sindica.to/job/DropwizardSpring_master_build/badge/icon)](http://jenkins.sindica.to/job/DropwizardSpring_master_build/)\r\n\r\n## Setup\r\n\r\n### Maven Setup\r\nVery soon kids...\r\n\r\n### Gradle Setup\r\n\r\n1. Add the following both repos in your _build.gradle_ file\r\n\r\n    ```groovy\r\n    repositories {\r\n      maven {\r\n        url 'http://oss.sonatype.org/content/repositories/snapshots'\r\n      }\r\n      maven {\r\n        url 'http://repo.sindica.to/nexus/content/repositories/public-milestones/'\r\n      }\r\n    }\r\n    ```\r\n\r\n2. Add the following dependency\r\n   \r\n    ```groovy\r\n    dependencies {\r\n      compile 'sindica.to:dropwizard-spring:0.2.0-SNAPSHOT'\r\n    }\r\n    ```\r\n\r\n## Development\r\n\r\n1. Create your Dropwizard Application extending from _sindica.to.dropwizard.spring.SpringApplication_\r\n\r\n    ```java\r\n    package sindica.to.sample;\r\n\r\n    import sindica.to.dropwizard.spring.SpringApplication;\r\n\r\n    public class MyApp extends SpringApplication<MyConf> {\r\n      public static void main(String[] args) throws Exception {\r\n        new MyApp().run(args);\r\n      }\r\n\r\n      @Override\r\n      public void onConfigureSpringContext(AnnotationConfigWebApplicationContext applicationContext) {\r\n        //Scan your own packages for Spring beans with annotations\r\n        //like @Component, @Repository, @Inject, @Autowired, etc\r\n        applicationContext.scan(\"sindica.to.sample\");\r\n      }\r\n    }\r\n    ```\r\n2. Create the usual Dropwizard artifacts as always\r\n\r\n    ```java\r\n    package sindica.to.sample.resource;\r\n\r\n    import org.springframework.stereotype.Component;\r\n    import sindica.to.sample.model.Person;\r\n\r\n    import javax.ws.rs.GET;\r\n    import javax.ws.rs.Path;\r\n    import java.util.List;\r\n\r\n    @Path(\"/person\")\r\n    @Component\r\n    public class PersonResource {\r\n      @GET\r\n      public List<Person> list() {\r\n        //TODO: implement this...\r\n      }\r\n    }\r\n    ```\r\n    The trick is to add the Spring's Annotations like _@Component_\r\n\r\n3. Enjoy, hack, deliver, profitÂ¡","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}